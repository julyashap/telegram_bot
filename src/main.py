import telebot
from telebot import types

from src.config import TOKEN_FOR_DANCE_BOT

from src.utils import create_start_markup, create_registration_markup, create_style_reference_markup, \
    create_hip_hop_markup, create_contemporary_markup, create_teams_markup, create_beho1ders_dates_markup, \
    create_cherdak_dates_markup, create_podval_dates_markup, create_raslabon_dates_markup, \
    team_button_handler, selection_handler, direction_button_handler, team_photo_handler

from src.classes.db_connector import DBConnector

import os.path


# —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
bot = telebot.TeleBot(TOKEN_FOR_DANCE_BOT)

# —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_states = {}

# –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
student_data = {}

# —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
db_connector = DBConnector('dance_icmit')
db_connector_students = DBConnector('students_icmit')

# —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞
test_score = 0


@bot.message_handler(commands=['start'])
def handle_start(message):
    markup = create_start_markup()
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –ü–æ–¥—Å–∫–∞–∂–∏ –º–Ω–µ, –∫—Ç–æ —Ç—ã?", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == 'student')
def student_button_handler(call):
    bot.send_message(call.message.chat.id, "–ü—Ä–∏–≤–µ—Ç, —Å—Ç—É–¥–µ–Ω—Ç! –ù–∞–∑–æ–≤–∏ –º–Ω–µ —Å–≤–æ—ë –§–ò–û –∏ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...")
    user_states[call.message.chat.id] = 'waiting_for_info_student'


@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == 'waiting_for_info_student')
def student_info_handler(message):
    student_info = message.text.split()

    if len(student_info) != 4:
        bot.send_message(message.chat.id, "–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!")
    else:
        last_name = student_info[0]
        first_name = student_info[1]
        patronymic = student_info[2]
        group = student_info[3]

        student_in_database = db_connector_students.get_data(f'select * from students where student_first_name '
                                                      f'= \'{first_name}\' and '
                                                      f'student_last_name = \'{last_name}\' and '
                                                      f'student_patronymic = \'{patronymic}\' '
                                                      f'and student_group = \'{group}\'')

        if student_in_database:
            student_data['id'] = str(message.chat.id)
            student_data['last_name'] = last_name
            student_data['first_name'] = first_name
            student_data['patronymic'] = patronymic
            student_data['group'] = group

            bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ! –ê —Ç–µ–ø–µ—Ä—å –¥–∞–≤–∞–π –ø—Ä–æ–π–¥–µ–º —Ç–µ—Å—Ç! üíÉ\n\n"
                                              "P.S. –û—Ç–≤–µ—á–∞–π –ø—Ä–æ—Å—Ç–æ: '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'")
            bot.send_message(message.chat.id, "–í–æ–ø—Ä–æ—Å 1: –ó–∞–Ω–∏–º–∞–ª—Å—è –ª–∏ —Ç—ã —Ç–∞–Ω—Ü–∞–º–∏ –¥–æ —ç—Ç–æ–≥–æ?")
            bot.register_next_step_handler(message, question_two)

            user_states[message.chat.id] = None  # —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        else:
            bot.send_message(message.chat.id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–µ–±—è –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö üò¢")


def question_two(message):
    global test_score

    if message.text.lower().strip() == '–¥–∞':
        test_score += 1

    bot.send_message(message.chat.id, "–í–æ–ø—Ä–æ—Å 2: –°—Ç–µ—Å–Ω—è–µ—à—å—Å—è –ª–∏ —Ç—ã —Ç–∞–Ω—Ü–µ–≤–∞—Ç—å –ø–µ—Ä–µ–¥ –ª—é–¥—å–º–∏?")
    bot.register_next_step_handler(message, question_three)


def question_three(message):
    global test_score

    if message.text.lower().strip() == '–Ω–µ—Ç':
        test_score += 1

    bot.send_message(message.chat.id, "–í–æ–ø—Ä–æ—Å 3: –¢—ã –∫–æ–≥–¥–∞ –Ω–∏–±—É–¥—å —É—á–∞—Å—Ç–≤–æ–≤–∞–ª –≤ —Ç–∞–Ω—Ü–µ–≤–∞–ª—å–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä—Å–∞—Ö –∏–ª–∏ –ø–æ—Å–µ—â–∞–ª –∏—Ö?")
    bot.register_next_step_handler(message, question_four)


def question_four(message):
    global test_score

    if message.text.lower().strip() == '–¥–∞':
        test_score += 1

    bot.send_message(message.chat.id, "–í–æ–ø—Ä–æ—Å 4: –¢—ã –∑–∞–Ω–∏–º–∞–ª—Å—è –∫–∞–∫–∏–º-–Ω–∏–±—É–¥—å –≤–∏–¥–æ–º —Å–ø–æ—Ä—Ç–∞?")
    bot.register_next_step_handler(message, question_five)


def question_five(message):
    global test_score

    if message.text.lower().strip() == '–¥–∞':
        test_score += 1

    bot.send_message(message.chat.id, "–í–æ–ø—Ä–æ—Å 5: –ì–æ—Ç–æ–≤ –ª–∏ —Ç—ã –≤—ã—É—á–∏—Ç—å –Ω–æ–≤—ã–π —Ç–∞–Ω—Ü–µ–≤–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å?")
    bot.register_next_step_handler(message, final_score)


def final_score(message):
    global test_score

    if message.text.lower().strip() == '–¥–∞':
        test_score += 1

    student_data['test_score'] = test_score

    bot.send_message(message.chat.id, "–û—Ç–ª–∏—á–Ω–æ! –¢—ã –≤—Å—ë –ø—Ä–æ—à–µ–ª! ü•≥")

    bot.send_message(message.chat.id, "<b>–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞</b>\n\n/registration: –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –æ—Ç–±–æ—Ä\n"
                                      "/selections: —Å–ø–∏—Å–æ–∫ —Ç–≤–æ–∏—Ö –æ—Ç–±–æ—Ä–æ–≤\n"
                                      "/cancel: –æ—Ç–º–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏\n/styleReference: —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ —Å—Ç–∏–ª—è—Ö —Ç–∞–Ω—Ü–µ–≤\n"
                                      "/teams: —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ —Ç–∞–Ω—Ü–µ–≤–∞–ª—å–Ω—ã—Ö –∫–æ–ª–ª–µ–∫—Ç–∏–≤–∞—Ö\n"
                                      "/otherStudents: –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ—Ç–æ–∫–∞\n"
                                      "/question: –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é\n/help: —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –±–æ—Ç–∞",
                     parse_mode='html')


@bot.callback_query_handler(func=lambda call: call.data == 'supervisor')
def supervisor_button_handler(call):
    bot.send_message(call.message.chat.id, "–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –ø–∞—Ä–æ–ª—å...")
    user_states[call.message.chat.id] = 'waiting_for_info_supervisor'


@bot.message_handler(func=lambda message: user_states.get(message.chat.id) == 'waiting_for_info_supervisor')
def supervisor_info_handler(message):
    supervisor_info = message.text

    leader_info = db_connector.get_data(f'select leader_id, leader_first_name '
                                         f'from leaders where leader_code = \'{supervisor_info}\'')

    if leader_info:
        db_connector.update_code(str(message.chat.id), leader_info[0][0])
        bot.send_message(message.chat.id, f"–û—Ç–ª–∏—á–Ω–æ, {leader_info[0][1]}! –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞! üíÉ")

        bot.send_message(message.chat.id, "<b>–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞</b>\n\n"
                                          "/selectionSchedule: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –æ—Ç–±–æ—Ä–æ–≤\n"
                                          "/listStudents: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø–∏—Å—è—Ö –Ω–∞ –æ—Ç–±–æ—Ä—ã\n"
                                          "/showCommands: —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –±–æ—Ç–∞\n", parse_mode='html')

        user_states[message.chat.id] = None
    else:
        bot.send_message(message.chat.id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–µ–±—è –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö üò¢")


@bot.message_handler(commands=['registration'])
def handle_registration(message):
    markup = create_registration_markup()
    bot.send_message(message.chat.id, "–í—Ä–µ–º—è <b>—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏</b>! –í—ã–±–µ—Ä–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–Ω—Ü–µ–≤! ü§©\n\n"
                                      "P.S. –î–ª—è —Å–ø—Ä–∞–≤–∫–∏ –ø–æ —Å—Ç–∏–ª—è–º —Ç–∞–Ω—Ü–µ–≤ –Ω–∞–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É: /styleReference",
                     reply_markup=markup, parse_mode='html')


@bot.callback_query_handler(func=lambda call: call.data == 'hip_hop_r')
def hip_hop_button_handler(call):
    markup = create_hip_hop_markup()
    bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏ –∫–æ–ª–ª–µ–∫—Ç–∏–≤:", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == 'contemporary_r')
def contemporary_button_handler(call):
    markup = create_contemporary_markup()
    bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏ –∫–æ–ª–ª–µ–∫—Ç–∏–≤:", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == 'beho1ders_r')
def beho1ders_button_handler(call):
    team_button_handler(call, 'Beho1ders', create_beho1ders_dates_markup, db_connector, bot)


@bot.callback_query_handler(func=lambda call: call.data == 'cherdak_r')
def cherdak_button_handler(call):
    team_button_handler(call, '–ß–µ—Ä–¥–∞–∫', create_cherdak_dates_markup, db_connector, bot)


@bot.callback_query_handler(func=lambda call: call.data == 'podval_r')
def podval_button_handler(call):
    team_button_handler(call, '–ü–æ–¥–≤–∞–ª', create_podval_dates_markup, db_connector, bot)


@bot.callback_query_handler(func=lambda call: call.data in ['jazz_funk_r', 'dancehall_r', 'raslabon_r'])
def raslabon_button_handler(call):
    team_button_handler(call, 'RA`s Lab.On', create_raslabon_dates_markup, db_connector, bot)


@bot.callback_query_handler(func=lambda call: call.data == 'beho1ders_t')
def beho1ders_button_handler(call):
    team_photo_handler(call, 'Beho1ders', os.path.join('..', 'assets', 'beho1ders.jpg'), db_connector, bot)


@bot.callback_query_handler(func=lambda call: call.data == 'cherdak_t')
def cherdak_button_handler(call):
    team_photo_handler(call, '–ß–µ—Ä–¥–∞–∫', os.path.join('..', 'assets', 'cherdak.jpg'), db_connector, bot)


@bot.callback_query_handler(func=lambda call: call.data == 'podval_t')
def podval_button_handler(call):
    team_photo_handler(call, '–ü–æ–¥–≤–∞–ª', os.path.join('..', 'assets', 'podval.jpg'), db_connector, bot)


@bot.callback_query_handler(func=lambda call: call.data == 'raslabon_t')
def raslabon_button_handler(call):
    team_photo_handler(call, 'RA`s Lab.On', os.path.join('..', 'assets', 'raslabon.jpg'), db_connector, bot)


@bot.callback_query_handler(func=lambda call: call.data == 'main_p')
def main_podval_handler(call):
    selection_handler(call, '–ü–æ–¥–≤–∞–ª', 'main_selection', db_connector, student_data, bot)


@bot.callback_query_handler(func=lambda call: call.data == 'reserve_p')
def reserve_podval_handler(call):
    selection_handler(call, '–ü–æ–¥–≤–∞–ª', 'reserve_selection', db_connector, student_data, bot)


@bot.callback_query_handler(func=lambda call: call.data == 'main_b')
def main_beho1ders_handler(call):
    selection_handler(call, 'Beho1ders', 'main_selection', db_connector, student_data, bot)


@bot.callback_query_handler(func=lambda call: call.data == 'reserve_b')
def reserve_beho1ders_handler(call):
    selection_handler(call, 'Beho1ders', 'reserve_selection', db_connector, student_data, bot)


@bot.callback_query_handler(func=lambda call: call.data == 'main_r')
def main_beho1ders_handler(call):
    selection_handler(call, 'RA`s Lab.On', 'main_selection', db_connector, student_data, bot)


@bot.callback_query_handler(func=lambda call: call.data == 'reserve_r')
def reserve_beho1ders_handler(call):
    selection_handler(call, 'RA`s Lab.On', 'reserve_selection', db_connector, student_data, bot)


@bot.callback_query_handler(func=lambda call: call.data == 'main_c')
def main_beho1ders_handler(call):
    selection_handler(call, '–ß–µ—Ä–¥–∞–∫', 'main_selection', db_connector, student_data, bot)


@bot.callback_query_handler(func=lambda call: call.data == 'reserve_c')
def reserve_beho1ders_handler(call):
    selection_handler(call, '–ß–µ—Ä–¥–∞–∫', 'reserve_selection', db_connector, student_data, bot)


@bot.callback_query_handler(func=lambda call: call.data in
                                              ['hip_hop_s', 'jazz_funk_s', 'dancehall_s', 'contemporary_s'])
def handle_direction_buttons(call):
    if call.data == 'hip_hop_s':
        direction_button_handler(call, '–•–∏–ø-—Ö–æ–ø', db_connector, bot)
    elif call.data == 'jazz_funk_s':
        direction_button_handler(call, '–î–∂–∞–∑-—Ñ–∞–Ω–∫', db_connector, bot)
    elif call.data == 'dancehall_s':
        direction_button_handler(call, '–î—ç–Ω—Å—Ö–æ–ª–ª', db_connector, bot)
    elif call.data == 'contemporary_s':
        direction_button_handler(call, '–ö–æ–Ω—Ç–µ–º–ø–æ—Ä–∞—Ä–∏', db_connector, bot)


@bot.message_handler(commands=['styleReference'])
def handle_style_reference(message):
    markup = create_style_reference_markup()
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å —á—É—Ç—å –±–æ–ª—å—à–µ:",
                     reply_markup=markup)


@bot.message_handler(commands=['teams'])
def handle_teams(message):
    markup = create_teams_markup()
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –∫–æ–ª–ª–µ–∫—Ç–∏–≤, –æ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å —á—É—Ç—å –±–æ–ª—å—à–µ:",
                     reply_markup=markup)


@bot.message_handler(commands=['cancel'])
def handle_cancel(message):
    registrations_data = db_connector.get_data(f'select registration_id, team_name, registration_date '
                                               f'from registrations where student_id = \'{message.chat.id}\'')

    if registrations_data:
        markup = types.InlineKeyboardMarkup()

        for registration_data in registrations_data:
            registration = types.InlineKeyboardButton(f'{registration_data[1]} {str(registration_data[2])[:-3]}',
                                                      callback_data=f'registration{registration_data[0]}')
            markup.add(registration)

        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –∑–∞–ø–∏—Å—å, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –æ—Ç–º–µ–Ω–∏—Ç—å: ", reply_markup=markup)
    else:
        bot.send_message(message.chat.id, "–£–ø—Å! –£ —Ç–µ–±—è –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π üò¢")


@bot.callback_query_handler(func=lambda call: call.data[:len('registration')] == 'registration')
def cancel_handler(call):
    registrations_data = db_connector.get_data(f'select registration_id, student_last_name, '
                                               f'student_first_name, student_patronymic, student_group, '
                                               f'team_name, registration_date from registrations '
                                               f'where student_id = \'{call.message.chat.id}\'')

    for registration_data in registrations_data:
        if str(registration_data[0]) == call.data[len('registration'):]:
            db_connector.delete_student(registration_data[0])
            bot.send_message(call.message.chat.id, '–ì–æ—Ç–æ–≤–æ! –û—Ç–º–µ–Ω–∏–ª–∏ —Ç–≤–æ—é –∑–∞–ø–∏—Å—å! üòâ')

            leader_chat_id = str(db_connector.get_data(f'select chat_id from leaders join teams using(leader_id) '
                                                   f'where team_name = \'{registration_data[5]}\'')[0][0])
            bot.send_message(leader_chat_id, f"<b>–û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏</b>\n\n{registration_data[1]} {registration_data[2]} "
                                             f"{registration_data[3]} {registration_data[4]}\n"
                                             f"{registration_data[5]} {str(registration_data[6])[:-3]}",
                             parse_mode='html')
            break


@bot.message_handler(commands=['otherStudents'])
def hanle_other_students(message):
    student_parameters = db_connector.get_data(f'select team_name, registration_date '
                                               f'from registrations where student_id = \'{message.chat.id}\'')
    other_students = ""
    for student_parameter in student_parameters:
        other_students_info = db_connector.get_data(f'select student_first_name, student_last_name, student_group, '
                                                    f'team_name, registration_date from registrations where '
                                                    f'student_id <> \'{message.chat.id}\' and team_name = '
                                                    f'\'{student_parameter[0]}\' and registration_date = '
                                                    f'\'{student_parameter[1]}\'')

        for other_student_info in other_students_info:
            other_students += f"{other_student_info[1]} {other_student_info[0]} {other_student_info[2]}, " \
                              f"{other_student_info[3]}: {str(other_student_info[4])[:-3]}\n"

    if other_students:
        bot.send_message(message.chat.id, f"<b>–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</b>\n\n{other_students}", parse_mode='html')
    else:
        bot.send_message(message.chat.id, "–° —Ç–æ–±–æ–π –ø–æ–∫–∞ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç üò¢")


@bot.message_handler(commands=['help'])
def handle_help(message):
    bot.send_message(message.chat.id, "<b>–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞</b>\n\n/registration: –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –æ—Ç–±–æ—Ä\n"
                                      "/selections: —Å–ø–∏—Å–æ–∫ —Ç–≤–æ–∏—Ö –æ—Ç–±–æ—Ä–æ–≤\n"
                                      "/cancel: –æ—Ç–º–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏\n/styleReference: —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ —Å—Ç–∏–ª—è—Ö —Ç–∞–Ω—Ü–µ–≤\n"
                                      "/teams: —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ —Ç–∞–Ω—Ü–µ–≤–∞–ª—å–Ω—ã—Ö –∫–æ–ª–ª–µ–∫—Ç–∏–≤–∞—Ö\n"
                                      "/otherStudents: –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ—Ç–æ–∫–∞\n"
                                      "/question: –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é\n/help: —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –±–æ—Ç–∞",
                     parse_mode='html')


@bot.message_handler(commands=['question'])
def handle_question(message):
    leaders_data = db_connector.get_data(f'select distinct team_name, leader_tg '
                                         f'from teams join leaders using(leader_id)')

    data_to_send = ""
    for leader_data in leaders_data:
        data_to_send += f"{leader_data[0]}: {leader_data[1]}\n"

    bot.send_message(message.chat.id, f"–ï—Å–ª–∏ —É —Ç–µ–±—è –ø–æ—è–≤–∏–ª—Å—è –≤–æ–ø—Ä–æ—Å, —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –µ–≥–æ\n"
                                      f"‚ú®<b>—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è–º</b>‚ú®\n\n"
                                      f"{data_to_send}", parse_mode='html')


@bot.message_handler(commands=['selections'])
def handle_selections(message):
    selections = db_connector.get_data(f'select distinct team_name, registration_date, selection_location '
                                       f'from registrations '
                                       f'where student_id = \'{message.chat.id}\'')

    if selections:
        selections_info = ""

        for selection in selections:
            selections_info += f"{selection[0]}: {str(selection[1])[:-3]}\n–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è: {selection[2]}\n\n"

        bot.send_message(message.chat.id, f"<b>–°–ø–∏—Å–æ–∫ —Ç–≤–æ–∏—Ö –æ—Ç–±–æ—Ä–æ–≤</b>\n\n{selections_info}\n\n", parse_mode='html')
        bot.send_message(message.chat.id, "<b>–ù–µ –∑–∞–±—É–¥—å –≤–∑—è—Ç—å —Å —Å–æ–±–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—É—é —Ñ–æ—Ä–º—É –∏ –≤–æ–¥–∏—á–∫—É!</b>",
                         parse_mode='html')
    else:
        bot.send_message(message.chat.id, "–ù–æ –≤–µ–¥—å —É —Ç–µ–±—è –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –Ω–∞ –æ—Ç–±–æ—Ä—ã üò¢")


@bot.message_handler(commands=['showCommands'])
def handle_show_commands(message):
    bot.send_message(message.chat.id, "<b>–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞</b>\n\n"
                                      "/selectionSchedule: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –æ—Ç–±–æ—Ä–æ–≤\n"
                                      "/listStudents: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø–∏—Å—è—Ö –Ω–∞ –æ—Ç–±–æ—Ä—ã\n"
                                      "/showCommands: —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –±–æ—Ç–∞\n", parse_mode='html')


@bot.message_handler(commands=['selectionSchedule'])
def handle_selection_schedule(message):
    selections_data = db_connector.get_data(f'select distinct team_name, main_selection, reserve_selection from teams '
                                            f'join leaders using(leader_id) where chat_id = \'{message.chat.id}\'')

    if selections_data:
        selection_schedule = "<b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–±–æ—Ä–æ–≤</b>\n\n"

        for selection_data in selections_data:
            selection_schedule += f"{selection_data[0]}: {str(selection_data[1])[:-3]}\n" \
                                  f"{selection_data[0]}: {str(selection_data[2])[:-3]}\n"

        bot.send_message(message.chat.id, selection_schedule, parse_mode='html')
    else:
        bot.send_message(message.chat.id, "–ü–æ—Ö–æ–∂–µ —É —Ç–µ–±—è –Ω–µ—Ç –æ—Ç–±–æ—Ä–æ–≤ üò¢")


@bot.message_handler(commands=['listStudents'])
def handle_list_students(message):
    selections_data = db_connector.get_data(f'select distinct team_name from teams '
                                            f'join leaders using(leader_id) where chat_id = \'{message.chat.id}\'')

    if selections_data:
        markup = types.InlineKeyboardMarkup()

        for selection_data in selections_data:
            selection = types.InlineKeyboardButton(f'{selection_data[0]}',
                                                   callback_data=f'selection_{selection_data[0]}')
            markup.add(selection)

        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ –æ—Ç–±–æ—Ä, —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—á–µ—à—å —É–≤–∏–¥–µ—Ç—å:",
                         reply_markup=markup)
    else:
        bot.send_message(message.chat.id, "–ü–æ—Ö–æ–∂–µ —É —Ç–µ–±—è –Ω–µ—Ç –æ—Ç–±–æ—Ä–æ–≤ üò¢")


@bot.callback_query_handler(func=lambda call: call.data[:len('selection')] == 'selection')
def list_students_handler(call):
    students_in_selection = db_connector.get_data(f'select student_first_name, student_last_name, '
                                                  f'student_patronymic, student_group, r.team_name, '
                                                  f'registration_date, test_score '
                                                  f'from registrations r join teams using(team_id) '
                                                  f'join leaders using(leader_id) '
                                                  f'where chat_id = \'{call.message.chat.id}\'')

    list_students = ""

    for student_in_selection in students_in_selection:
        if str(student_in_selection[4]) == call.data[len('selection_'):]:
            list_students += f"{student_in_selection[1]} {student_in_selection[0]} {student_in_selection[2]} " \
                             f"{student_in_selection[3]}:\n{str(student_in_selection[5])[:-3]}, " \
                             f"—Ç–µ—Å—Ç: {student_in_selection[6]}/5\n\n"

    if list_students:
        bot.send_message(call.message.chat.id, f"<b>–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</b>\n\n{list_students}", parse_mode='html')
    else:
        bot.send_message(call.message.chat.id, "–ü–æ—Ö–æ–∂–µ –Ω–∞ —ç—Ç–æ—Ç –æ—Ç–±–æ—Ä –ø–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞–ø–∏—Å–∞–ª—Å—è üò¢")


@bot.message_handler(func=lambda message: "—Å–ø–∞—Å–∏–±–æ" in message.text.lower())
def thank_you_handler(message):
    bot.send_message(message.chat.id, "–í—Å–µ–≥–¥–∞ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞!")


# –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling(none_stop=True, interval=0)

db_connector.cur.close()
db_connector.conn.close()
