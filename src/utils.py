from telebot import types


def create_start_markup():
    markup = types.InlineKeyboardMarkup()
    student = types.InlineKeyboardButton('–Ø —Å—Ç—É–¥–µ–Ω—Ç', callback_data='student')
    supervisor = types.InlineKeyboardButton('–Ø —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å', callback_data='supervisor')
    markup.add(student, supervisor)
    return markup


def create_registration_markup():
    markup = types.InlineKeyboardMarkup()
    hip_hop = types.InlineKeyboardButton('–•–∏–ø-—Ö–æ–ø', callback_data='hip_hop_r')
    jazz_funk = types.InlineKeyboardButton('–î–∂–∞–∑-—Ñ–∞–Ω–∫', callback_data='jazz_funk_r')
    dancehall = types.InlineKeyboardButton('–î—ç–Ω—Å—Ö–æ–ª–ª', callback_data='dancehall_r')
    contemporary = types.InlineKeyboardButton('–ö–æ–Ω—Ç–µ–º–ø–æ—Ä–∞—Ä–∏', callback_data='contemporary_r')
    markup.add(hip_hop, jazz_funk, dancehall, contemporary)
    return markup


def create_style_reference_markup():
    markup = types.InlineKeyboardMarkup()
    hip_hop = types.InlineKeyboardButton('–•–∏–ø-—Ö–æ–ø', callback_data='hip_hop_s')
    jazz_funk = types.InlineKeyboardButton('–î–∂–∞–∑-—Ñ–∞–Ω–∫', callback_data='jazz_funk_s')
    dancehall = types.InlineKeyboardButton('–î—ç–Ω—Å—Ö–æ–ª–ª', callback_data='dancehall_s')
    contemporary = types.InlineKeyboardButton('–ö–æ–Ω—Ç–µ–º–ø–æ—Ä–∞—Ä–∏', callback_data='contemporary_s')
    markup.add(hip_hop, jazz_funk, dancehall, contemporary)
    return markup


def create_hip_hop_markup():
    markup = types.InlineKeyboardMarkup()
    beho1ders = types.InlineKeyboardButton('Beho1ders', callback_data='beho1ders_r')
    raslabon = types.InlineKeyboardButton('RA\'s Lab.On', callback_data='raslabon_r')
    markup.add(beho1ders, raslabon)
    return markup


def create_contemporary_markup():
    markup = types.InlineKeyboardMarkup()
    cherdak = types.InlineKeyboardButton('–ß–µ—Ä–¥–∞–∫', callback_data='cherdak_r')
    podval = types.InlineKeyboardButton('–ü–æ–¥–≤–∞–ª', callback_data='podval_r')
    markup.add(cherdak, podval)
    return markup


def create_teams_markup():
    markup = types.InlineKeyboardMarkup()
    beho1ders = types.InlineKeyboardButton('Beho1ders', callback_data='beho1ders_t')
    raslabon = types.InlineKeyboardButton('RA\'s Lab.On', callback_data='raslabon_t')
    cherdak = types.InlineKeyboardButton('–ß–µ—Ä–¥–∞–∫', callback_data='cherdak_t')
    podval = types.InlineKeyboardButton('–ü–æ–¥–≤–∞–ª', callback_data='podval_t')
    markup.add(beho1ders, raslabon, cherdak, podval)
    return markup


def create_beho1ders_dates_markup():
    markup = types.InlineKeyboardMarkup()
    main = types.InlineKeyboardButton('–û—Å–Ω–æ–≤–Ω–æ–π –¥–µ–Ω—å', callback_data='main_b')
    reserve = types.InlineKeyboardButton('–†–µ–∑–µ—Ä–≤–Ω—ã–π –¥–µ–Ω—å', callback_data='reserve_b')
    markup.add(main, reserve)
    return markup


def create_cherdak_dates_markup():
    markup = types.InlineKeyboardMarkup()
    main = types.InlineKeyboardButton('–û—Å–Ω–æ–≤–Ω–æ–π –¥–µ–Ω—å', callback_data='main_c')
    reserve = types.InlineKeyboardButton('–†–µ–∑–µ—Ä–≤–Ω—ã–π –¥–µ–Ω—å', callback_data='reserve_c')
    markup.add(main, reserve)
    return markup


def create_podval_dates_markup():
    markup = types.InlineKeyboardMarkup()
    main = types.InlineKeyboardButton('–û—Å–Ω–æ–≤–Ω–æ–π –¥–µ–Ω—å', callback_data='main_p')
    reserve = types.InlineKeyboardButton('–†–µ–∑–µ—Ä–≤–Ω—ã–π –¥–µ–Ω—å', callback_data='reserve_p')
    markup.add(main, reserve)
    return markup


def create_raslabon_dates_markup():
    markup = types.InlineKeyboardMarkup()
    main = types.InlineKeyboardButton('–û—Å–Ω–æ–≤–Ω–æ–π –¥–µ–Ω—å', callback_data='main_r')
    reserve = types.InlineKeyboardButton('–†–µ–∑–µ—Ä–≤–Ω—ã–π –¥–µ–Ω—å', callback_data='reserve_r')
    markup.add(main, reserve)
    return markup


def team_button_handler(call, team_name, create_markup_func, db_connector, bot):
    markup = create_markup_func()
    team_data = db_connector.get_data(f"select distinct team_name, team_description, main_selection, "
                                      f"reserve_selection, selection_location "
                                      f"from teams where team_name = '{team_name}'")
    bot.send_message(call.message.chat.id, f"–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ç–∏–≤–∞: <b>{team_data[0][0]}</b>\n\n{team_data[0][1]}\n\n"
                                           f"<b>–û—Å–Ω–æ–≤–Ω–æ–π</b> –¥–µ–Ω—å –æ—Ç–±–æ—Ä–∞: <b>{str(team_data[0][2])[:-3]}</b>\n"
                                           f"<b>–†–µ–∑–µ—Ä–≤–Ω—ã–π</b> –¥–µ–Ω—å: <b>{str(team_data[0][3])[:-3]}</b>\n\n"
                                           f"<b>–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è:</b> {team_data[0][4]}",
                     reply_markup=markup, parse_mode='html')


def selection_handler(call, team_name, selection_type, db_connector, student_data, bot):
    team_data = db_connector.get_data(f"select team_name, {selection_type}, selection_location, team_id from teams "
                                      f"where team_name = '{team_name}'")
    student_data['team_name'] = team_data[0][0]
    student_data['registration_date'] = team_data[0][1]
    student_data['selection_location'] = team_data[0][2]
    student_data['team_id'] = team_data[0][3]
    db_connector.insert_student(student_data)
    bot.send_message(call.message.chat.id, '–û—Ç–ª–∏—á–Ω–æ! –¢—ã –∑–∞–ø–∏—Å–∞–Ω –Ω–∞ –æ—Ç–±–æ—Ä! ü•∞\n\n<b>P.S. –ù–µ –∑–∞–±—É–¥—å –≤–∑—è—Ç—å –Ω–∞ –æ—Ç–±–æ—Ä '
                                           '—Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—É—é —Ñ–æ—Ä–º—É –∏ –≤–æ–¥–∏—á–∫—É!</b>', parse_mode='html')
    leader_chat_id = db_connector.get_data(f"select chat_id from leaders join teams using(leader_id) "
                                           f"where team_name = '{team_name}'")[0][0]
    bot.send_message(leader_chat_id, f"<b>–ó–∞–ø–∏—Å—å</b>\n\n{student_data['last_name']} {student_data['first_name']} "
                                     f"{student_data['patronymic']} {student_data['group']}\n"
                                     f"{student_data['team_name']}  |  {str(student_data['registration_date'])[:-3]}\n"
                                     f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞: {student_data['test_score']}/5", parse_mode='html')


def direction_button_handler(call, direction_name, db_connector, bot):
    direction_data = db_connector.get_data(f"select direction_name, direction_description, direction_example "
                                           f"from directions where direction_name = '{direction_name}'")
    bot.send_message(call.message.chat.id, f"–í—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ç–∏–ª—å: <b>{direction_data[0][0]}</b>"
                                           f"\n\n{direction_data[0][1]}\n\n"
                                           f"–í–∏–¥–µ–æ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —Å—Ç–∏–ª—è: {direction_data[0][2]}", parse_mode='html')


def team_photo_handler(call, team_name, image_path, db_connector, bot):
    team_data = db_connector.get_data(f"select distinct team_name, team_description "
                                      f"from teams where team_name = '{team_name}'")
    photo = open(image_path, 'rb')
    caption = f"–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ç–∏–≤–∞: <b>{team_data[0][0]}</b>\n\n{team_data[0][1]}"
    bot.send_photo(call.message.chat.id, photo, caption=caption, parse_mode='html')
